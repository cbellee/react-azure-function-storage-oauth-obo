trigger:
- main

variables:
  #timestamp: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 100)]
  azureSubscription: 'internal_azure_subscription'
  environmentName: 'dev'
  vmImageName: 'ubuntu-latest'
  location: 'australiaeast'
  tenantName: 'kainiindustries.net'
  resourceGroupName: 'student-app-2-rg'
  bicepFileName: 'main'
  aadAdminObjectId: '57963f10-818b-406d-a2f6-6e758d86e259'
  aadAdminDisplayName: 'aad-dbadmin'
  databaseName: 'students'
  sqlAdminUserName: 'dbadmin'
  sqlAdminPassword: 'M1cr0soft1234567890'
  tenantId: '3d49be6f-6e38-404b-bbd4-f61c1a2d25bf'
  authority: https://login.microsoftonline.com/$(tenantId)
  reactClientId: '1c0ddb7a-f862-455d-9e4f-8c64fc4cd489'
  apiClientId: '038554c4-271d-4c8f-ae72-56d3d23db9fc'
  apiClientSecret: 'NX8F0H7I1Z26g5Cwevg6d~42~7H._xiQpB'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: CopyFiles@2
      displayName: 'copy React files to staging directory'
      inputs:
        SourceFolder: $(System.DefaultWorkingDirectory)/client
        Contents: '**/*'
        TargetFolder: $(Build.ArtifactStagingDirectory)/react
        CleanTargetFolder: true

    - task: CopyFiles@2
      displayName: 'copy function app files to staging directory'
      inputs:
        SourceFolder: $(System.DefaultWorkingDirectory)/server
        Contents: '**/*'
        TargetFolder: $(Build.ArtifactStagingDirectory)/function
        CleanTargetFolder: true

    - task: Bash@3
      displayName: 'compile bicep to ARM'
      inputs:
        targetType: inline
        script: |
          az bicep build --file $(System.DefaultWorkingDirectory)/iac/$(bicepFileName).bicep

    - task: CopyFiles@2
      displayName: 'copy ARM template files to staging directory'
      inputs:
        SourceFolder: $(System.DefaultWorkingDirectory)/iac
        Contents: $(bicepFileName).json
        TargetFolder: $(Build.ArtifactStagingDirectory)/template
        CleanTargetFolder: true
    
    - task: PublishBuildArtifacts@1
      displayName: 'publish ARM template'
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)/template
        ArtifactName: template
  
    - task: PublishBuildArtifacts@1
      displayName: 'publish function code'
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)/function
        ArtifactName: function

    - task: PublishBuildArtifacts@1
      displayName: 'publish react code'
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)/react
        ArtifactName: react

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
    - job: DeployInfrastructure
      steps:
        - task: DownloadPipelineArtifact@2
          displayName: 'download arm template artifacts'
          inputs:
            artifactName: template
            targetPath: $(Pipeline.Workspace)/artifacts/template

        - task: DownloadPipelineArtifact@2
          displayName: 'download function artifacts'
          inputs:
            artifactName: function
            targetPath: $(Pipeline.Workspace)/artifacts/function

        - task: DownloadPipelineArtifact@2
          displayName: 'download react artifacts'
          inputs:
            artifactName: react
            targetPath: $(Pipeline.Workspace)/artifacts/react
        
        - task: AzureResourceManagerTemplateDeployment@3
          displayName: 'deploy infrastructure'
          inputs:
            deploymentScope: 'Resource Group'
            azureResourceManagerConnection: $(azureSubscription)
            action: 'Create Or Update Resource Group'
            resourceGroupName: $(resourceGroupName)
            location: $(location)
            templateLocation: 'Linked artifact'
            csmFile: $(Pipeline.Workspace)/artifacts/template/$(bicepFileName).json
            overrideParameters: |
              -dbName $(databaseName) -sqlAdminUserName $(sqlAdminUserName) -sqlAdminPassword $(sqlAdminPassword)
            deploymentMode: Incremental
            deploymentOutputs: infraDeployment
            deploymentName: "infraDeployment-$(Build.BuildNumber)"
        
        - task: AzureCLI@2
          displayName: 'enable azure storage static website'
          inputs:
            scriptType: pscore
            scriptLocation: inlineScript
            azureSubscription: $(azureSubscription)
            inlineScript: |
              # enable Azure storage static web app feature 
              az storage blob service-properties update `
              --account-name $(infraDeployment.webStorageAccountName.value) `
              --static-website true `
              --index-document index.html

        - task: AzureCLI@2
          displayName: 'enable Azure sql server AAD admin'
          inputs:
            scriptType: pscore
            scriptLocation: inlineScript
            azureSubscription: $(azureSubscription)
            inlineScript: |
              # enable Azure SQL server AAD admin account
              az sql server ad-admin create `
              --server $(infraDeployment.sqlServerName.value) `
              --display-name $(aadAdminDisplayName) `
              --object-id $(aadAdminObjectId) `
              --resource-group $(resourceGroupName)

        - task: AzureCLI@2
          displayName: 'patch function config files'
          inputs:
            azureSubscription: $(azureSubscription)
            scriptType: pscore
            scriptLocation: inlineScript
            inlineScript: |
              # patch auth.json
              $authConfig = Get-Content -Path $(Pipeline.Workspace)/artifacts/function/auth.json | ConvertFrom-Json
              $authConfig.tenantName = "$(tenantName)"
              $authConfig.tenantID = "$(tenantId)"
              $authConfig.clientID = "$(apiClientId)"
              $authConfig.clientSecret = "$(apiClientSecret)"
              $authConfig.audience = "$(apiClientId)"
              $authConfig.storageAccountName = $(infraDeployment.docsStorageAccountName.value)
              $authConfig | Set-Content -Path $(Pipeline.Workspace)/artifacts/function/auth.json -Force

              # patch db.json
              $dbConfig = Get-Content -Path $(Pipeline.Workspace)/artifacts/function/db.json | ConvertFrom-Json
              $dbConfig.serverName = $(infraDeployment.sqlServerName.value)
              $dbConfig.dbName = $(infraDeployment.sqlDatabaseName.value)
              $dbConfig | Set-Content -Path $(Pipeline.Workspace)/artifacts/function/db.json -Force

              Write-Host "infraDeployment: $(infraDeployment)"
        
        - task: ArchiveFiles@2
          displayName: 'create function app zip archive'
          inputs:
            archiveType: zip
            rootFolderOrFile: $(Pipeline.Workspace)/artifacts/function
            archiveFile: $(Pipeline.Workspace)/artifacts/function/function-$(Build.BuildId).zip
            includeRootFolder: false

        - task: AzureCLI@2
          displayName: 'deploy azure function'
          inputs:
            azureSubscription: $(azureSubscription)
            scriptLocation: inlineScript
            scriptType: pscore
            inlineScript: |
              az functionapp deployment source config-zip `
              --resource-group $(resourceGroupName) `
              --name $(infraDeployment.functionName.value) `
              --src $(Pipeline.Workspace)/artifacts/function/function-$(Build.BuildId).zip `
              --timeout 360

        - task: AzureFunctionApp@1
          displayName: 'deploy function'
          enabled: false
          inputs:
            azureSubscription: $(azureSubscription)
            appType: functionAppLinux
            appName: $(infraDeployment.functionName.value)
            runtimeStack: 'NODE|12'
            package: $(Pipeline.Workspace)/artifacts/function/$(Build.BuildId).zip
            startUpCommand: 'npm run start'
            resourceGroupName: $(resourceGroupName)

        - task: NodeTool@0
          inputs:
            versionSpec: '10.x'
          displayName: 'Install Node.js'
    
        - task: AzureCLI@2
          displayName: 'build react app'
          inputs:
            azureSubscription: $(azureSubscription)
            scriptType: pscore
            scriptLocation: inlineScript
            inlineScript: |
              # create .env.prod file
              cd $(Pipeline.Workspace)/artifacts/react #/src
              New-Item -Name '.env.prod' -Path . -ItemType File

              $functionName = $(infraDeployment.functionName.value)
              $apiUri = https://$($functionName).azurewebsites.net/api"
              $apiClientUri = "api://$(apiClientId)"

              $webStorageAccount = az storage account  show --resource-group $(resourceGroupName) --name $(infraDeployment.webStorageAccountName.value) | ConvertFrom-Json
              $storageKeys = az storage account keys list --resource-group $(resourceGroupName) --name $(infraDeployment.webStorageAccountName.value) | ConvertFrom-Json
              
              # patch .env.prod file
              $envVars = @(
                "REACT_APP_CLIENT_ID=$(reactClientId)",
                "REACT_APP_AUTHORITY=$(authority)",
                "BLOB_READ_SCOPE=$($apiClientUri)/storage.blob.read",
                "SQL_READ_WRITE_SCOPE=$($apiClientUri)/sql.db.readwrite",
                "REACT_APP_API_ENDPOINT=$apiUri",
                "REACT_APP_REDIRECT_URI=$apiUri",
                "REACT_APP_POST_LOGOUT_REDIRECT_URI=$apiUri",
                "REACT_APP_REDIRECT_URI=$(infraDeployment.webStorageEndpoint.value)",
                "REACT_APP_POST_LOGOUT_REDIRECT_URI=$(infraDeployment.webStorageEndpoint.value)"
              )

              # add env vars to ./.env.prod file
              $envVars | Foreach-Object {
                Add-Content -Value $_ -Path ./.env.prod 
              }
            
              # build react app
              npm install env-cmd
              npm install
              npm run build:prod
              npm run test --if-present

        - task: AzureFileCopy@4
          displayName: 'copy react files to static web storage account'
          inputs:
            azureSubscription: $(azureSubscription)
            ContainerName: '$web'
            SourcePath: $(Pipeline.Workspace)/artifacts/react/build
            Destination: AzureBlob
            resourceGroup: $(resourceGroupName)
            storage: $(infraDeployment.webStorageAccountName.value)
